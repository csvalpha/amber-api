require 'rails_helper'

RSpec.describe SpreadsheetHelper, type: :helper do
  include described_class

  let(:test_file_path) { Rails.root.join('spec', 'support', 'files', 'user_import.csv') }
  let(:test_file) { File.open(test_file_path) }

  # rubocop:disable Layout/LineLength
  let(:base64_data) do
    'data:text/csv;base64,Zmlyc3RfbmFtZSxsYXN0X25hbWVfcHJlZml4LGxhc3RfbmFtZSxlbWFpbCxiaXJ0aGRheSxhZGRyZXNzLHBvc3Rjb2RlLGNpdHkscGhvbmVfbnVtYmVyLGZvb2RfcHJlZmVyZW5jZXMsdmVnZXRhcmlhbixzdHVkeSxwaWN0dXJlX3B1YmxpY2F0aW9uX3ByZWZlcmVuY2UsZW1lcmdlbmN5X2NvbnRhY3QsZW1lcmdlbmN5X251bWJlcixpZmVzX2RhdGFfc2hhcmluZ19wcmVmZXJlbmNlLGluZm9faW5fYWxtYW5hayxhbG1hbmFrX3N1YnNjcmlwdGlvbl9wcmVmZXJlbmNlLGRpZ3R1c19zdWJzY3JpcHRpb25fcHJlZmVyZW5jZSxsb2dpbl9lbmFibGVkCkFydGjDunIsZGUsS29uaW5nLUFyZW5kcyxzdGlqbkBleGFtcGxlLmNvbSwxOTcwLTItMixIZW5nZWxvc2VzdHJhYXQgMSw3NTE0TkIsRW5zY2hlZGUsICszMSgwKTYxMjM0NTY3OCwiTm90ZW4sIGxhY3Rvc2UiLHRydWUsVGVjaG5pc2NoZSBOYXR1dXJrdW5kZSxhbHdheXNfcHVibGlzaCxNLiBkZSBSdWl0ZXIsMDYyMjg2NTI1NSx0cnVlLGZhbHNlLG5vX3N1YnNjcmlwdGlvbixub19zdWJzY3JpcHRpb24sZmFsc2UKVMOrc3Rlw6csdsOzbixCw7xuZGVuc3TDoHXDnyxrb2VuQGV4YW1wbGUuY29tLDE5NzAtMi0yMCxIZW5nZWxvc2VzdHJhYXQgMyw3NTAwQUEsRW5zY2hlZGUsICszMSgwKTYxMjM0NTY3OCwsZmFsc2UsVGVjaG5pc2NoZSBLdW5kaWdoZWlkLGFsd2F5c19wdWJsaXNoLE0uIGRlIFJ1aXRlciwwNjk4NzY1NDMyLGZhbHNlLHRydWUsbm9fc3Vic2NyaXB0aW9uLG5vX3N1YnNjcmlwdGlvbixmYWxzZQpIYW5zIERhdmlkLCd0LEhvZ2UscGxla2tpZUBleGFtcGxlLmNvbSwxOTcwLTItMjAsUGxla2tpZSAzLDc1MDBBQSxOdW5zcGVldCwwNjEyMzQ1Njc4LCxmYWxzZSxUZWNobmlzY2hlIEt1bmRpZ2hlaWQsYWx3YXlzX3B1Ymxpc2gsTS4gZGUgUnVpdGVyLDA2OTg3NjU0MzIsZmFsc2UsdHJ1ZSxub19zdWJzY3JpcHRpb24sbm9fc3Vic2NyaXB0aW9uLGZhbHNlCg=='
  end

  describe '#decode_upload_file' do
    context 'when the file is a CSV' do
      let(:decoded_upload) { decode_upload_file(base64_data) }

      it { expect(File.read(decoded_upload[:file])).to eq File.read(test_file) }
      it { expect(decoded_upload[:extension]).to eq 'csv' }
    end

    context 'when the file is an ODS' do
      let(:ods_base64_data) do
        'data:application/vnd.oasis.opendocument.spreadsheet;base64,'
      end
      let(:decoded_upload) { decode_upload_file(ods_base64_data) }

      it { expect(decoded_upload[:extension]).to eq 'ods' }
    end

    context 'when the file is an XLSX' do
      let(:xlsx_base64_data) do
        'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,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'
      end
      let(:decoded_upload) { decode_upload_file(xlsx_base64_data) }

      it { expect(decoded_upload[:extension]).to eq 'xlsx' }
    end

    context 'when the file is an XLSM' do
      let(:xlsm_base64_data) do
        'data:application/vnd.ms-excel.sheet.macroEnabled.12;base64,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'
      end
      let(:decoded_upload) { decode_upload_file(xlsm_base64_data) }

      it { expect(decoded_upload[:extension]).to eq 'xlsm' }
    end
  end

  describe '#split_base_url' do
    it { expect(split_base_url(base64_data)[:data]).to eq Base64.encode64(File.read(test_file_path)).delete("\n") }
  end

  context 'with broken base64 strings' do
    describe '#decode_upload_file' do
      let(:broken_base64_data) do
        'data:text/csv;base64,Zmlyc3RfbmFtZSxsYXN0X25hbWVfcHJlZml4LGxhc3RfbmFtZSxlbWFpbCxiaXJ0aGRheSxhZGRyZXNzLHBvc3Rjb2RlLGNpdHkscGhvbmVfbnVtYmVyLGFsbGVyZ2llcyx2ZWdldGFyaWFuLHN0dWR5LHBpY3R1cmVfcHVibGljYXR😈pb25fcHJlZmVyZW5jZSxlbWVyZ2VuY3lfY29udGFjdCxlbWVyZ2VuY3lfbnVtYmVyLGlmZXNfZGF0YV9zaGFyaW5nX3ByZWZlcmVuY2UsaW5mb19pbl9hbG1hbmFrLGFsbWFuYWtfc3Vic2NyaXB0aW9uX3ByZWZlcmVuY2UsZGlndHVzX3N1YnNjcmlwdGlvbl9wcmVmZXJlbmNlLGxvZ2luX2VuYWJsZWQKQXJ0aMO6cixkZSxLb25pbmctQXJlbmRzLHN0aWpuQGV4YW1wbGUuY29tLDE5NzAtMi0yLEhlbmdlbG9zZXN0cmFhdCAxLDc1MTROQixFbnNjaGVkZSwgKzMxKDApNjEyMzQ1Njc4LCJOb3RlbiwgbGFjdG9zZSIsdHJ1ZSxUZWNobmlzY2hlIE5hdHV1cmt1bmRlLGFsd2F5c19wdWJsaXNoLE0uIGRlIFJ1aXRlciwwNjIyODY1MjU1LHRydWUsZmFsc2Usbm9fc3Vic2NyaXB0aW9uLG5vX3N1YnNjcmlwdGlvbixmYWxzZQpUw6tzdGXDpyx2w7NuLELDvG5kZW5zdMOgdcOfLGtvZW5AZXhhbXBsZS5jb20sMTk3MC0yLTIwLEhlbmdlbG9zZXN0cmFhdCAzLDc1MDBBQSxFbnNjaGVkZSwgKzMxKDApNjEyMzQ1Njc4LCxmYWxzZSxUZWNobmlzY2hlIEt1bmRpZ2hlaWQsYWx3YXlzX3B1Ymxpc2gsTS4gZGUgUnVpdGVyLDA2OTg3NjU0MzIsZmFsc2UsdHJ1ZSxub19zdWJzY3JpcHRpb24sbm9fc3Vic2NyaXB0aW9uLGZhbHNlCkhhbnMgRGF2aWQsJ3QsSG9nZSxwbGVra2llQGV4YW1wbGUuY29tLDE5NzAtMi0yMCxQbGVra2llIDMsNzUwMEFBLE51bnNwZWV0LDA2MTIzNDU2NzgsLGZhbHNlLFRlY2huaXNjaGUgS3VuZGlnaGVpZCxhbHdheXNfcHVibGlzaCxNLiBkZSBSdWl0ZXIsMDY5ODc2NTQzMixmYWxzZSx0cnVlLG5vX3N1YnNjcmlwdGlvbixub19zdWJzY3JpcHRpb24sZmFsc2UK'
      end

      it { expect(decode_upload_file(broken_base64_data)[:file]).to be_instance_of Tempfile }
    end

    describe '#split_base_url' do
      let(:extremely_broken_base64_data) do
        'dataev;base6mlyc3RfbmFtZSxsYXN0X25hbWVfcHJlZml4LGxhc3RfbmFtZSxlbWFpbCxiaXJ0aGRheSxhZGRyZXNzLHBvc3Rjb2RlLGNpdHkscGhvbmVfbnVtYmVyLGFsbGVyZ2llcyx2ZWdldGFyaWFuLHN0dWR5LHBpY3R1cmVfcHVibGljYXRpb25fcHJlZmVyZW5jZSxpYmFuLGliYW5faG9sZGVyPANICLGVtZXJnZW5jeV9jb250YWN0LGVtZXJnZW5jeV9udW1iZXIsaWZlc19kYXRhX3NoYXJpbmdfcHJlZmVyZW5jZSxpbmZvX2luX2FsbWFuYWssYWxtYW5ha19zdWJzY3JpcHRpb25fcHJlZmVyZW5jZSxkaWd0dXNfc3Vic2NyaXB0aW9uX3ByZWZlcmVuY2UsZW5hYmxlZApBcnRow7pyLGRlLEtvbmluZy1BcmVuZHMsc3Rpam5AZXhhbXBsZS5jb20sMTk3MC0yLTIsSGVuZ2Vsb3Nlc3RyYWF0IDEsNzUxNE5CLEVuc2NoZWRlLCArMzEoMCk2MTIzNDU2NzgsIk5vdGVuLCBsYWN0b3NlIix0cnVlLFRlYwhat?'
      end

      it { expect(split_base_url(extremely_broken_base64_data)).to be_nil }
    end

    # rubocop:enable Layout/LineLength
  end
end
